#!/usr/bin/env bash

version="1.0.0"

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_parameter=

print_help ()
{
	echo "Show details of a specific resource"
	printf 'Usage: %s [-p|--parameter <arg>] [-v|--version] [-h|--help] <type>\n' "$0"
	printf "\t%s\n" "<type>: type of resouce, service/router"
	printf "\t%s\n" "<name>: name of resouce"
	printf "\t%s\n" "-p,--parameter: optional argument for resource (no default)"
	printf "\t%s\n" "-v,--version: Prints version"
	printf "\t%s\n" "-h,--help: Prints help"
}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		-p*|--parameter|--parameter=*)
			_val_from_long="${_key##--parameter=}"
			_val_from_short="${_key##-p}"
			if test "$_val_from_long" != "$_key"
			then
				_val="$_val_from_long"
			elif test "$_val_from_short" != "$_key" -a -n "$_val_from_short"
			then
				_val="$_val_from_short"
			else
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_parameter="$_val"
			;;
		-v*|--version)
			echo ${version}
			exit 0
			;;
		-h*|--help)
			print_help
			exit 0
			;;
		*)
			_positionals+=("$1")
			;;
	esac
	shift
done

_positional_names=('_arg_type' '_arg_name' )
_required_args_string="'type' and 'name'"
test ${#_positionals[@]} -lt 2 && _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
test ${#_positionals[@]} -gt 2 && _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
for (( ii = 0; ii < ${#_positionals[@]}; ii++))
do
	eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
done

view_app()
{
    output=`oc describe ${_positionals[0]} ${_positionals[1]}`
    if [ $? -eq 0 ]; then
        case "${_positionals[0]}" in
            service)
               ip=`echo ${output} | grep -Po '(?<=(ClusterIP IP: ))\b([0-9]{1,3}\.){3}[0-9]{1,3}\b(?= Port:)'`
               echo {\"success\": \"true\", \"data\": {\"ip\":\"${ip}\"}}
            ;;
            route)
                host=`echo ${output} | grep -Po '(?<=(Requested Host: )).*(?= exposed)'`
                echo {\"success\": \"true\", \"data\": {\"host\":\"${host}\"}}
            ;;
        esac
    else
      echo {\"success\": \"false\", \"error\": \"\"}
    fi
}

view_app